// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: image_streaming.proto

#include "image_streaming.pb.h"
#include "image_streaming.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace imagestreaming {

static const char* ImageStreaming_method_names[] = {
  "/imagestreaming.ImageStreaming/VideoStart",
};

std::unique_ptr< ImageStreaming::Stub> ImageStreaming::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ImageStreaming::Stub> stub(new ImageStreaming::Stub(channel, options));
  return stub;
}

ImageStreaming::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_VideoStart_(ImageStreaming_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::imagestreaming::ImgRequest, ::imagestreaming::ImgResponse>* ImageStreaming::Stub::VideoStartRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::imagestreaming::ImgRequest, ::imagestreaming::ImgResponse>::Create(channel_.get(), rpcmethod_VideoStart_, context);
}

void ImageStreaming::Stub::async::VideoStart(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::imagestreaming::ImgRequest,::imagestreaming::ImgResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::imagestreaming::ImgRequest,::imagestreaming::ImgResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_VideoStart_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::imagestreaming::ImgRequest, ::imagestreaming::ImgResponse>* ImageStreaming::Stub::AsyncVideoStartRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::imagestreaming::ImgRequest, ::imagestreaming::ImgResponse>::Create(channel_.get(), cq, rpcmethod_VideoStart_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::imagestreaming::ImgRequest, ::imagestreaming::ImgResponse>* ImageStreaming::Stub::PrepareAsyncVideoStartRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::imagestreaming::ImgRequest, ::imagestreaming::ImgResponse>::Create(channel_.get(), cq, rpcmethod_VideoStart_, context, false, nullptr);
}

ImageStreaming::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageStreaming_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ImageStreaming::Service, ::imagestreaming::ImgRequest, ::imagestreaming::ImgResponse>(
          [](ImageStreaming::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::imagestreaming::ImgResponse,
             ::imagestreaming::ImgRequest>* stream) {
               return service->VideoStart(ctx, stream);
             }, this)));
}

ImageStreaming::Service::~Service() {
}

::grpc::Status ImageStreaming::Service::VideoStart(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::imagestreaming::ImgResponse, ::imagestreaming::ImgRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace imagestreaming


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_streaming.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_image_5fstreaming_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_image_5fstreaming_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_image_5fstreaming_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_image_5fstreaming_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_image_5fstreaming_2eproto;
namespace imagestreaming {
class ImgRequest;
struct ImgRequestDefaultTypeInternal;
extern ImgRequestDefaultTypeInternal _ImgRequest_default_instance_;
class ImgResponse;
struct ImgResponseDefaultTypeInternal;
extern ImgResponseDefaultTypeInternal _ImgResponse_default_instance_;
}  // namespace imagestreaming
PROTOBUF_NAMESPACE_OPEN
template<> ::imagestreaming::ImgRequest* Arena::CreateMaybeMessage<::imagestreaming::ImgRequest>(Arena*);
template<> ::imagestreaming::ImgResponse* Arena::CreateMaybeMessage<::imagestreaming::ImgResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace imagestreaming {

// ===================================================================

class ImgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:imagestreaming.ImgRequest) */ {
 public:
  inline ImgRequest() : ImgRequest(nullptr) {}
  ~ImgRequest() override;
  explicit constexpr ImgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImgRequest(const ImgRequest& from);
  ImgRequest(ImgRequest&& from) noexcept
    : ImgRequest() {
    *this = ::std::move(from);
  }

  inline ImgRequest& operator=(const ImgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImgRequest& operator=(ImgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImgRequest* internal_default_instance() {
    return reinterpret_cast<const ImgRequest*>(
               &_ImgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImgRequest& a, ImgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImgRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImgRequest* New() const final {
    return new ImgRequest();
  }

  ImgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImgRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "imagestreaming.ImgRequest";
  }
  protected:
  explicit ImgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kChannelFieldNumber = 4,
  };
  // bytes img = 1;
  void clear_img();
  const std::string& img() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_img(ArgT0&& arg0, ArgT... args);
  std::string* mutable_img();
  PROTOBUF_MUST_USE_RESULT std::string* release_img();
  void set_allocated_img(std::string* img);
  private:
  const std::string& _internal_img() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_img(const std::string& value);
  std::string* _internal_mutable_img();
  public:

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 4;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:imagestreaming.ImgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_5fstreaming_2eproto;
};
// -------------------------------------------------------------------

class ImgResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:imagestreaming.ImgResponse) */ {
 public:
  inline ImgResponse() : ImgResponse(nullptr) {}
  ~ImgResponse() override;
  explicit constexpr ImgResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImgResponse(const ImgResponse& from);
  ImgResponse(ImgResponse&& from) noexcept
    : ImgResponse() {
    *this = ::std::move(from);
  }

  inline ImgResponse& operator=(const ImgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImgResponse& operator=(ImgResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImgResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImgResponse* internal_default_instance() {
    return reinterpret_cast<const ImgResponse*>(
               &_ImgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ImgResponse& a, ImgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImgResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImgResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImgResponse* New() const final {
    return new ImgResponse();
  }

  ImgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImgResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImgResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImgResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "imagestreaming.ImgResponse";
  }
  protected:
  explicit ImgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountsFieldNumber = 1,
  };
  // int32 counts = 1;
  void clear_counts();
  ::PROTOBUF_NAMESPACE_ID::int32 counts() const;
  void set_counts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_counts() const;
  void _internal_set_counts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:imagestreaming.ImgResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 counts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_5fstreaming_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImgRequest

// bytes img = 1;
inline void ImgRequest::clear_img() {
  img_.ClearToEmpty();
}
inline const std::string& ImgRequest::img() const {
  // @@protoc_insertion_point(field_get:imagestreaming.ImgRequest.img)
  return _internal_img();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImgRequest::set_img(ArgT0&& arg0, ArgT... args) {
 
 img_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:imagestreaming.ImgRequest.img)
}
inline std::string* ImgRequest::mutable_img() {
  std::string* _s = _internal_mutable_img();
  // @@protoc_insertion_point(field_mutable:imagestreaming.ImgRequest.img)
  return _s;
}
inline const std::string& ImgRequest::_internal_img() const {
  return img_.Get();
}
inline void ImgRequest::_internal_set_img(const std::string& value) {
  
  img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ImgRequest::_internal_mutable_img() {
  
  return img_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ImgRequest::release_img() {
  // @@protoc_insertion_point(field_release:imagestreaming.ImgRequest.img)
  return img_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ImgRequest::set_allocated_img(std::string* img) {
  if (img != nullptr) {
    
  } else {
    
  }
  img_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:imagestreaming.ImgRequest.img)
}

// int32 width = 2;
inline void ImgRequest::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImgRequest::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImgRequest::width() const {
  // @@protoc_insertion_point(field_get:imagestreaming.ImgRequest.width)
  return _internal_width();
}
inline void ImgRequest::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void ImgRequest::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:imagestreaming.ImgRequest.width)
}

// int32 height = 3;
inline void ImgRequest::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImgRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImgRequest::height() const {
  // @@protoc_insertion_point(field_get:imagestreaming.ImgRequest.height)
  return _internal_height();
}
inline void ImgRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void ImgRequest::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:imagestreaming.ImgRequest.height)
}

// int32 channel = 4;
inline void ImgRequest::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImgRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImgRequest::channel() const {
  // @@protoc_insertion_point(field_get:imagestreaming.ImgRequest.channel)
  return _internal_channel();
}
inline void ImgRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void ImgRequest::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:imagestreaming.ImgRequest.channel)
}

// -------------------------------------------------------------------

// ImgResponse

// int32 counts = 1;
inline void ImgResponse::clear_counts() {
  counts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImgResponse::_internal_counts() const {
  return counts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImgResponse::counts() const {
  // @@protoc_insertion_point(field_get:imagestreaming.ImgResponse.counts)
  return _internal_counts();
}
inline void ImgResponse::_internal_set_counts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  counts_ = value;
}
inline void ImgResponse::set_counts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_counts(value);
  // @@protoc_insertion_point(field_set:imagestreaming.ImgResponse.counts)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace imagestreaming

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_image_5fstreaming_2eproto
